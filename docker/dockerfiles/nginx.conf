worker_processes  1;
error_log error.log;
env REDIS_HOST;
env REDIS_PORT;
events {
    worker_connections 1024;
}
http {
    init_worker_by_lua_block {
        local uuid = require 'resty.jit-uuid'
        uuid.seed()
    }
    resolver 127.0.0.11 ipv6=off;

    server {
        listen        8000;
        charset       utf-8;
        charset_types application/json;
        default_type  application/json;
        location / {
            content_by_lua '
                local uuid = require "resty.jit-uuid"
                local cjson = require "cjson"
                local redis = require "resty.redis"
                local r     = redis:new()
                local ok, err = r:connect(os.getenv("REDIS_HOST"), os.getenv("REDIS_PORT"))
                if not ok then
                  ngx.say(cjson.encode({
                    status = "error", 
                    msg =  "failed to connect: " .. err
                    }
                   )
                  )
                  return
                end
                local get, post, files = require "resty.reqargs"()
                local payload = {}
                payload["class"] = "HelloJob"
                payload["queue"] = "default"
                payload["jid"] = uuid()
                payload["args"] = post
                payload["retry"] = true
                payload["created_at"] = os.time()
                payload["enqueued_at"] = os.time()
                assert(r:lpush("queue:default", cjson.encode(payload)))
                r = nil
                ngx.status  = ngx.HTTP_OK
                ngx.say(cjson.encode({status = "saved", msg=payload}))
                return ngx.exit(ngx.HTTP_OK)
            ';
        }
    }
}